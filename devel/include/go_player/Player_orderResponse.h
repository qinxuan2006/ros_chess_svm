// Generated by gencpp from file go_player/Player_orderResponse.msg
// DO NOT EDIT!


#ifndef GO_PLAYER_MESSAGE_PLAYER_ORDERRESPONSE_H
#define GO_PLAYER_MESSAGE_PLAYER_ORDERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace go_player
{
template <class ContainerAllocator>
struct Player_orderResponse_
{
  typedef Player_orderResponse_<ContainerAllocator> Type;

  Player_orderResponse_()
    : success(false)
    , step()  {
    }
  Player_orderResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , step(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _step_type;
  _step_type step;





  typedef boost::shared_ptr< ::go_player::Player_orderResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::go_player::Player_orderResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Player_orderResponse_

typedef ::go_player::Player_orderResponse_<std::allocator<void> > Player_orderResponse;

typedef boost::shared_ptr< ::go_player::Player_orderResponse > Player_orderResponsePtr;
typedef boost::shared_ptr< ::go_player::Player_orderResponse const> Player_orderResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::go_player::Player_orderResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::go_player::Player_orderResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace go_player

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'go_player': ['/home/mrobot/ros_chess_svm/src/go_player/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::go_player::Player_orderResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::go_player::Player_orderResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::go_player::Player_orderResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::go_player::Player_orderResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::go_player::Player_orderResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::go_player::Player_orderResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::go_player::Player_orderResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4386e1c0ee0164cbde602d58249d27dc";
  }

  static const char* value(const ::go_player::Player_orderResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4386e1c0ee0164cbULL;
  static const uint64_t static_value2 = 0xde602d58249d27dcULL;
};

template<class ContainerAllocator>
struct DataType< ::go_player::Player_orderResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "go_player/Player_orderResponse";
  }

  static const char* value(const ::go_player::Player_orderResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::go_player::Player_orderResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
bool success\n\
int8[] step\n\
\n\
";
  }

  static const char* value(const ::go_player::Player_orderResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::go_player::Player_orderResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Player_orderResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::go_player::Player_orderResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::go_player::Player_orderResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "step[]" << std::endl;
    for (size_t i = 0; i < v.step.size(); ++i)
    {
      s << indent << "  step[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.step[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GO_PLAYER_MESSAGE_PLAYER_ORDERRESPONSE_H
